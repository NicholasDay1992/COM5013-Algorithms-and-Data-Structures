{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red200\green241\blue153;\red1\green25\blue64;\red255\green255\blue255;
\red174\green208\blue255;\red253\green136\blue147;}
{\*\expandedcolortbl;;\cssrgb\c81961\c94510\c66275;\cssrgb\c0\c14118\c31765;\cssrgb\c100000\c100000\c100000;
\cssrgb\c73333\c85490\c100000;\cssrgb\c100000\c61569\c64314;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ## Stacks vs Heaps for memory management in programs
\f1\b0 \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Stack memory operates on the Last-In-First-Out (LIFO) principle. The most recent item added to the stack is the first item to be removed (popped) from the stack.\cb1 \
\
\cb3 When a program is instructed to execute a function via a function call, a new item, a so-called stack frame, is created and pushed onto the stack for that function call. The stack frame contains:\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 * Local function variables.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * Parameters passed to the function.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * The return address that tells the program where to continue executing once the function completes.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * Other administrative details, such as the base pointer of the previous frame.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 When the function finishes execution, the stack frame is popped off, and the system hands over the control to the return address specified in the frame.\cb1 \
\
\cb3 Stack advantages: \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Fast Allocation/Deallocation\cf6 \strokec6 </b>\cf5 \strokec5 . Allocating and deallocating memory on the stack is fast and accomplished by simply adjusting the stack pointer value. The stack pointer is moved up to allocate and down to deallocate space (some systems may apply the opposite down/up convention).\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Automatic Memory Management\cf6 \strokec6 </b>\cf5 \strokec5 . Memory space on the stack is managed automatically. Space for local variables is automatically allocated when a function is called and deallocated when a function exits.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 No Fragmentation\cf6 \strokec6 </b>\cf5 \strokec5 . Memory allocation is sequential and consistent, eliminating memory fragmentation and ensuring the efficient use of free space.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Quick Data Access\cf6 \strokec6 </b>\cf5 \strokec5 . The sequential nature of stack memory allocation generally ensures good cache locality. This results in quicker data access and boosts performance.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Predictable Lifespan\cf6 \strokec6 </b>\cf5 \strokec5 . Variables on the stack exist only for the duration of the function or scope they are in. This predictability makes code easier to write and read.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Less Overhead\cf6 \strokec6 </b>\cf5 \strokec5 . Stack memory allocation has minimal overhead and does not involve intricate algorithms and metadata.\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Stack disadvantages: \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Limited Size\cf6 \strokec6 </b>\cf5 \strokec5 . Stack memory is limited in size, and once it is exhausted, it results in a stack overflow, causing the program to crash. This makes the stack unsuitable for storing large amounts of data.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Limited Access\cf6 \strokec6 </b>\cf5 \strokec5 . The Last in First Out (LIFO) principle of the stack means that standard operations primarily interact with the top of the stack. Direct random access to other locations in the stack beyond current scope boundaries can lead to errors.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Variable Lifespan\cf6 \strokec6 </b>\cf5 \strokec5 . Variables are automatically deallocated once a function or code block ends, which makes it unsuitable for data that needs to persist across multiple functions.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 No Resizing\cf6 \strokec6 </b>\cf5 \strokec5 . The stack does not allow memory block resizing once they are allocated. For instance, if you allocate too little memory for an array on the stack, it cannot be resized like with dynamically allocated memory.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 No Manual Control\cf6 \strokec6 </b>\cf5 \strokec5 . While the automatic nature of stack memory can be seen as an advantage, it is a disadvantage when more control over memory allocation and deallocation is required.\
\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 \strokec2 ## So what is a heap?
\f1\b0 \cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 * A heap is a region of computer memory used for dynamic memory allocation. \cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 * In the heap, variables require explicit creation and deletion. For example, C and C++ developers use functions and operators like \cf6 \strokec6 `malloc()`\cf5 \strokec5 , \cf6 \strokec6 `free()`\cf5 \strokec5 , \cf6 \strokec6 `new`\cf5 \strokec5 , or \cf6 \strokec6 `delete`\cf5 \strokec5  to allocate and deallocate memory.\cf4 \cb1 \strokec4 \
\
\cb3 Heap is typically used:\cb1 \
\
\cf5 \cb3 \strokec5 * When the memory requirement for a data structure, such as an array or object, is unknown until runtime.\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 * To store data that should persist beyond the lifespan of a single function call.\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 * When there is a possibility that allocated memory might need resizing in the future.\cf4 \cb1 \strokec4 \
\
\cb3 Heap advantages:\cb1 \
\
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Dynamic Allocation\cf6 \strokec6 </b>\cf5 \strokec5 . Programs can allocate memory at runtime based on their needs, resulting in more efficient memory use.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Variable Lifetime\cf6 \strokec6 </b>\cf5 \strokec5 . Objects allocated on the heap persist until they are explicitly deallocated or the program ends. They can outlive the function call that created them, which is especially useful for data that needs to persist across multiple function calls or even for the duration of the program.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Large Memory Pool\cf6 \strokec6 </b>\cf5 \strokec5 . The heap provides a much larger memory pool than the stack. It is suitable for allocating larger data structures or ones that might grow, like arrays or lists.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Flexibility\cf6 \strokec6 </b>\cf5 \strokec5 . Since the heap can grow and shrink within the system's available memory, it is more flexible in handling needs that might change during a program's execution.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Globally Accessible\cf6 \strokec6 </b>\cf5 \strokec5 . Heap memory is globally accessible, meaning it can be accessed and modified by any part of the code and is not bound by the call stack. Sharing data across different parts of a program or even between threads is a clear benefit.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Reusability\cf6 \strokec6 </b>\cf5 \strokec5 . After memory on the heap is deallocated, it can be reused for future allocations, making it a recyclable resource.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Support for Complex Structures\cf6 \strokec6 </b>\cf5 \strokec5 . Heap memory can build and manage complex data structures like trees, graphs, and linked lists, which might require frequent and dynamic memory allocations and deallocations.\cf4 \cb1 \strokec4 \
\
\cb3 Heap disadvantages: \cb1 \
\
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Hands-on Memory Management\cf6 \strokec6 </b>\cf5 \strokec5 . Heap memory requires explicit management. Developers must manually allocate and deallocate memory, which can introduce potential errors and consume additional resources.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Memory Leaks\cf6 \strokec6 </b>\cf5 \strokec5 . If the memory is not deallocated after it serves its function, it may result in memory leaks. This means the program consumes memory, eventually leading to out-of-memory errors, especially in long-running applications.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Fragmentation\cf6 \strokec6 </b>\cf5 \strokec5 . Memory on the heap is allocated and deallocated dynamically. This can lead to scattered, unused memory blocks (external fragmentation) or small wasted spaces within the allocated blocks (internal fragmentation).\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Slower Access\cf6 \strokec6 </b>\cf5 \strokec5 . Accessing variables on the heap is generally slower than accessing variables on the stack.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Dangling Pointers\cf6 \strokec6 </b>\cf5 \strokec5 . Pointers referencing deallocated memory locations can become dangling pointers. Accessing or modifying data through such pointers can lead to undefined behavior.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Concurrency Issues\cf6 \strokec6 </b>\cf5 \strokec5 . Accessing and modifying heap memory across multiple threads without proper synchronization can result in corrupt data.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 * \cf6 \strokec6 <b>\cf5 \strokec5 Potential for Bugs\cf6 \strokec6 </b>\cf5 \strokec5 : Due to the manual nature of heap memory management, there is an increased potential for double-free errors, where a developer might attempt to deallocate memory that has already been deallocated.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 \
\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \strokec4 \
}